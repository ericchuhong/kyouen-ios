fastlane_version '1.107.0'

default_platform :ios

# You need to set your project values.
scheme_name_adhoc = 'TumeKyouen_adhoc'
scheme_name_store = 'TumeKyouen_release'
deploygate_user_name = 'noboru-i'
project_name = 'TumeKyouen'
bundle_id = 'hm.orz.chaos114.TumeKyouen'
plist_file_path = 'TumeKyouen/TumeKyouen-Info.plist'

# And you need to set environment variables.
# DEPLOY_GATE_KEY : DeployGate API key, using when upload to DeployGate.
# GITHUB_ACCESS_TOKEN : GitHub access token, using when comment to Pull Request and create release.
# KEY_PASSWORD : p12 password, using when import *.p12 files.

platform :ios do

  lane :build_for_appium do
    xcodebuild(
      scheme: scheme_name_adhoc,
      build: true,
      sdk: 'iphonesimulator',
      derivedDataPath: 'build'
    )
  end

  desc 'Submit a new Beta Build to DeployGate'
  lane :beta do
    gym(
      scheme: scheme_name_adhoc,
      configuration: "AdHoc",
      use_legacy_build_api: true
    )

    UI.message 'Save Artifacts'
    sh "cp #{lane_context[SharedValues::IPA_OUTPUT_PATH]} $CIRCLE_ARTIFACTS"

    message = "Commit: #{ENV['CIRCLE_SHA1']} / #{last_git_commit[:message]}, Build: #{ENV['CIRCLE_BUILD_NUM']}"
    deploygate(
      api_token: ENV['DEPLOY_GATE_KEY'],
      user: deploygate_user_name,
      ipa: lane_context[SharedValues::IPA_OUTPUT_PATH],
      message: message
    )
  end

  desc 'Submit a new Release Build to TestFlight'
  lane :release do
    set_info_plist_value(
      path: plist_file_path,
      key: 'CFBundleVersion',
      value: ENV['CIRCLE_BUILD_NUM']
    )

    gym(
      scheme: scheme_name_store,
      configuration: "Release",
      use_legacy_build_api: true
    )

    pilot(
      skip_submission: true,
      skip_waiting_for_build_processing: true
    )

    version = get_info_plist_value(path: plist_file_path, key: 'CFBundleShortVersionString')
    set_github_release(
      repository_name: "#{ENV['CIRCLE_PROJECT_USERNAME']}/#{ENV['CIRCLE_PROJECT_REPONAME']}",
      api_token: ENV['GITHUB_ACCESS_TOKEN'],
      name: "Build: #{ENV['CIRCLE_BUILD_NUM']}",
      commitish: ENV['CIRCLE_SHA1'],
      description: '',
      tag_name: "v#{version}",
      is_prerelease: false,
      upload_assets: [lane_context[SharedValues::IPA_OUTPUT_PATH]]
    )
  end

  desc 'Analyze codes'
  desc 'This may comment to pull request'
  lane :analyze do
    xcode_analyze
    lint
  end

  private_lane :xcode_analyze do
    xcodebuild(
      analyze: true,
      scheme: scheme_name_adhoc,
      configuration: "AdHoc",
      derivedDataPath: './derivedData',
      build_settings: {
        "CODE_SIGN_IDENTITY" => ENV['GYM_CODE_SIGNING_IDENTITY']
      }
    )

    sh <<-EOS
cd ../;
ios_analytics translate --appName="#{project_name}" --derivedData="./derivedData" \
    | checkstyle_filter-git diff origin/master \
    | saddler report --require saddler/reporter/github --reporter #{reporter}
    EOS
  end

  private_lane :lint do
    create_lint_config

    swiftlint(
      output_file: 'swiftlint.result.json',
      config_file: '.swiftlint-ci.yml'
    )

    sh 'cp ../swiftlint.result.json $CIRCLE_ARTIFACTS/'

    sh <<-EOS
cd ../;
cat swiftlint.result.json \
    | swiftlint_translate_checkstyle_format translate \
    | checkstyle_filter-git diff origin/master \
    | saddler report --require saddler/reporter/github --reporter #{reporter}
    EOS

    delete_lint_config
  end

  def create_lint_config
    File.delete('../.swiftlint-ci.yml') if File.exist?('../.swiftlint-ci.yml')
    require 'yaml'
    config = YAML.load_file('../.swiftlint.yml')
    config['reporter'] = 'json'
    open('../.swiftlint-ci.yml', 'w') do |file|
      YAML.dump(config, file)
    end
  end

  def delete_lint_config
    File.delete('../.swiftlint-ci.yml')
  end

  def reporter
    if ENV['CI_PULL_REQUEST'].nil? || ENV['CI_PULL_REQUEST'].empty?
      'Saddler::Reporter::Github::CommitReviewComment'
    else
      'Saddler::Reporter::Github::PullRequestReviewComment'
    end
  end
end
